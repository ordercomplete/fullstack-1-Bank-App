//Файл App.js
import React from "react";

import { BrowserRouter, Routes, Route } from "react-router-dom";
import { PrivateRoute } from "./PrivateRoute";
import { SigninPage } from "./container/SigninPage";
import { SignupPage } from "./container/SignupPage";
import { SignupConfirmPage } from "./container/SignupConfirmPage";
import { RecoveryConfirmPage } from "./container/RecoveryConfirmPage";
import { RecoveryPage } from "./container/RecoveryPage";

import { AuthContext } from "./AuthContext";

import AuthRoute from "./AuthRoute";
import WellcomePage from "./container/WellcomePage";
import SendPage from "./container/SendPage";
import TransactionPage from "./container/TransactionPage";
import BalancePage from "./container/BalancePage";
import NotificationsPage from "./container/NotificationsPage";
import SettingsPage from "./container/SettingsPage";
import receivePage from "./container/receivePage";
import Error from "./container/ErrorPage";

function App() {
  //const authContextData = {}; - Визначити відповідну структуру або надайти відповідні дані. Створити там, де він повинен бути та імпортувати сюди

  return (
    <AuthContext.Provider value={authContextData}>
      <BrowserRouter>
        <Routes>
          <Route
            index
            element={
              <AuthRoute>
                <WellcomePage />
              </AuthRoute>
            }
          />

          <Route
            path="/signup"
            element={
              <AuthRoute>
                <SignupPage />
              </AuthRoute>
            }
          />
          <Route
            path="/signup-confirm"
            element={<PrivateRoute>{<SignupConfirmPage />}</PrivateRoute>}
          />
          <Route
            path="/signin"
            element={
              <AuthRoute>
                <SigninPage />
              </AuthRoute>
            }
          />
          <Route
            path="/recovery"
            element={
              <AuthRoute>
                <RecoveryPage />
              </AuthRoute>
            }
          />
          <Route
            path="/recovery-confirm"
            element={
              <AuthRoute>
                <RecoveryConfirmPage />
              </AuthRoute>
            }
          />
          <Route
            path="/balance"
            element={
              <PrivateRoute>
                <BalancePage />
              </PrivateRoute>
            }
          />
          <Route
            path="/notifications"
            element={
              <PrivateRoute>
                <NotificationsPage />
              </PrivateRoute>
            }
          />
          <Route
            path="/settings"
            element={
              <PrivateRoute>
                <SettingsPage />
              </PrivateRoute>
            }
          />
          <Route
            path="/receive"
            element={
              <PrivateRoute>
                <receivePage />
              </PrivateRoute>
            }
          />
          <Route
            path="/send"
            element={
              <PrivateRoute>
                <SendPage />
              </PrivateRoute>
            }
          />
          <Route
            path="/transaction/:transactionId"
            element={
              <PrivateRoute>
                <TransactionPage />
              </PrivateRoute>
            }
          />
          <Route path="*" Component={Error} />
        </Routes>
      </BrowserRouter>
    </AuthContext.Provider>
  );
}

export default App;

//Файл SignupPage
import { useContext } from "react";
import { AuthContext } from "../../AuthContext";

import { useNavigate } from "react-router-dom";
import { registerUser } from "../../AuthActions";

export const SignupPage = () => {
  const { dispatch } = useContext(AuthContext);
  const navigate = useNavigate();

  const handleSubmit = (event) => {
    event.preventDefault();

    const email = event.target.email.value;
    const password = event.target.password.value;
    const confirmationCode = Math.random().toString(36).substring(2, 12);

    const registrationResult = registerUser(email, password, confirmationCode);
    if (registrationResult.success) {
      alert(
        `Реєстрація пройшла успішно, ваш код підтвердження: ${confirmationCode}`
      );
      dispatch({
        type: "REGISTER_USER",
        payload: { email, password, confirmationCode },
      });
      navigate("/signup-confirm");
    } else {
      alert(registrationResult.message);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="default-container">
        <button
          type="button"
          onClick={() => navigate(-1)}
          className="nav_back-button"
        >
          ⟵ Назад
        </button>
        <h1>Реєстрація</h1>
        <div className="input_field-container">
          <input
            type="email"
            name="email"
            placeholder="Email"
            required
            className="input_field"
          />
          <input
            type="password"
            name="password"
            placeholder="Пароль"
            required
            className="input_field"
          />
        </div>
        <p>
          Чи маєте акаунт?{" "}
          <span
            onClick={() => navigate("/signin")}
            style={{ color: "blue", cursor: "pointer" }}
          >
            Увійдіть
          </span>
        </p>
        <button
          type="submit"
          style={{ opacity: "1" }}
          className="continue-button"
        >
          Продовжити
        </button>
      </div>
    </form>
  );
};

//Файл AuthRoute
import React, { useContext } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "./AuthContext";

export const AuthRoute = ({ children }) => {
  const context = useContext(AuthContext);
  const { state } = context || {};
  const { token, user } = state || {};

  if (token && user?.confirmed) {
    return <Navigate to="/balance" />;
  }

  return children;
};
export default AuthRoute;

// Файл SignupConfirmPage
import React, { useContext, useState } from "react";
import { AuthContext } from "../../AuthContext";
import { useNavigate } from "react-router-dom";

export const SignupConfirmPage = () => {
  const { state, dispatch } = useContext(AuthContext);
  const { users } = state;

  const navigate = useNavigate();
  const [codeInput, setCodeInput] = useState("");

  if (!users || users.length === 0) {
    console.error("База даних користувачів не існує або порожня");
    return;
  }

  const handleSubmitConfirmation = (event) => {
    event.preventDefault();
    const user = users.find((u) => u.email === state.user?.email);
    if (user && codeInput.trim() === user.confirmationCode) {
      dispatch({ type: "CONFIRM_USER", email: user.email });
      alert("Підтвердження успішно!");
      navigate("/balance");
    } else {
      alert("Неправильний код підтвердження.");
    }
  };

  return (
    <div>
      <h1>Підтвердження реєстрації</h1>
      <form onSubmit={handleSubmitConfirmation}>
        <input
          type="text"
          value={codeInput}
          onChange={(e) => setCodeInput(e.target.value)}
          placeholder="Введіть код підтвердження"
          required
        />
        <button type="submit">Підтвердити</button>
      </form>
    </div>
  );
};

// Файл AuthContext
import React, { createContext, useReducer } from "react";
import { usersDatabase } from "./AuthActions";

const initialState = {
  token: null,
  user: null,
  isLoggedIn: false,
  users: usersDatabase,
};

function reducer(state, action) {
  switch (action.type) {
    case "REGISTER_USER":
      return {
        ...state,
        users: [...state.users, { ...action.payload, confirmed: false }],
        user: { ...action.payload, confirmed: false },
      };
    case "CONFIRM_USER":
      return {
        ...state,
        users: state.users.map((user) =>
          user.email === action.payload.email
            ? { ...user, confirmed: true }
            : user
        ),
        user: { ...state.user, confirmed: true },
      };
    default:
      return state;
  }
}

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <AuthContext.Provider value={{ state, dispatch }}>
      {children}
    </AuthContext.Provider>
  );
};

//Файл AuthActions
export let usersDatabase = [];

export function registerUser(email, password, confirmationCode) {
  const userExists = usersDatabase.some((user) => user.email === email);

  if (userExists) return { success: false, message: "Користувач вже існує." };

  const newUser = { email, password, confirmationCode, confirmed: false };

  usersDatabase.push(newUser);

  console.log(
    `AuthAction Новий користувач: ${email} з паролем: ${password} з кодом: ${confirmationCode}`
  );
  return {
    success: true,
    message: "Користувач зареєстрований успішно.",
    confirmationCode,
  };
}

//Файл PrivateRoute
import { useContext } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "./AuthContext";

export const PrivateRoute = ({ children }) => {
  const context = useContext(AuthContext);
  const { state } = context || {};
  const { token, user } = state || {};

  if (!token || (user && !user.confirmed)) {
    return <Navigate to="/signup-confirm" />;
  }

  return children;
};
