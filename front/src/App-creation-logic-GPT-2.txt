### Налаштування `style.css`

```css
/* Загальні стилі для контейнерів */
.default-container {
    background: no-repeat, white;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 393px;
    height: 852px;
    border: 1px solid #775CE6;
    border-radius: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    overflow: hidden;
    color: black;
}

h1 {
    margin-top: 100px;
    font-size: 42px;
}

p {
    margin: 20px;
}

/* Стилі для полів вводу */
.input_field-container {
    display: grid;
    gap: 20px;
    margin-top: 40px;
    margin-bottom: 50px;
}

/* Стилі для кнопок */
.button-container {
    display: grid;
    gap: 10px;
    margin-top: auto;
    margin-bottom: 50px;
}

.input_field {
    color: black;
    border: 1px solid #775CE6;
    border-radius: 6px;
    padding: 10px 20px;
    background-color: white;
    display: block;
    width: 353px;
    box-sizing: border-box;
}

.continue-button, .register-button, .login-button, .settings-button {
    width: 353px;
    padding: 10px 20px;
    border-radius: 6px;
    text-decoration: none;
    display: block;
}

.register-button, .continue-button {
    background: #775CE6;
    color: white;
}

.settings-button {
    background: white;
    border: 1px solid #775CE6;
    color: #775CE6;
}

/* Стилі для активних кнопок */
.register-button:active, .continue-button:active {
    background: #9278F0; /* Світліше відтінок #775CE6 */
}

.settings-button:active {
    background: lightgrey;
}

/* Стилі для стрілки назад */
.nav_back-button {
    position: absolute;
    top: 40px;
    left: 30px;
}
```

### Файл `AuthContext.js`

```jsx
import React, { createContext, useReducer } from 'react';

export const AuthContext = createContext();

const initialState = {
    token: null,
    user: null
};

const reducer = (state, action) => {
    switch (action.type) {
        case 'LOGIN':
            return { ...state, token: action.payload.token, user: action.payload.user };
        case 'LOGOUT':
            return { ...initialState };
        default:
            return state;
    }
};

const AuthContextProvider = ({ children }) => {
    const [state, dispatch] = useReducer(reducer, initialState);

    return (
        <AuthContext.Provider value={{ ...state, dispatch }}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthContextProvider;
```

### Компонент `AuthRoute.js`

```jsx
import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import { AuthContext } from './AuthContext';

const AuthRoute = ({ children }) => {
    const { token } = useContext(AuthContext);

    if (token) {
        return <Navigate to="/balance" />;
    }

    return children;
};

export default AuthRoute;
```

### Файл `SignupPage.js` (**Зразок**)

```jsx
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const SignupPage = () => {
    const navigate = useNavigate();
    const { dispatch } = useContext(AuthContext);

    const handleSignup = (event) => {
        event.preventDefault();
        const { email, password } = event.target.elements;  
        const userData = { email: email.value, password: password.value };

        // Реєстрація користувача (припустимо)
        dispatch({ type: 'LOGIN', payload: { token: 'some_token', user: userData } });
        navigate('/signup-confirm');
    };

    return (
        <div className="default-container">
            <button className="nav_back-button">Назад</button>
            <h1>Реєстрація</h1>
            <form onSubmit={handleSignup}>
                <div className="input_field-container">
                    <input className="input_field" 
                    name="email" 
                    placeholder="Email" 
                    required /> 
            Password
          Продовжити ); };

export default SignupPage;

="input_field" name="email" placeholder="Email" required />
                    <input className="input_field" name="password" type="password" placeholder="Password" required />
                </div>
                <button type="submit" className="continue-button">Продовжити</button>
            </form>
        </div>
    );
};

export default SignupPage;
```

### Файл `SignupConfirmPage.js`

```jsx
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const SignupConfirmPage = () => {
    const navigate = useNavigate();
    const { dispatch } = useContext(AuthContext);

    const handleConfirm = (event) => {
        event.preventDefault();
        const { confirm } = event.target.elements;
        const confirmCode = confirm.value;

        // Підтвердження реєстрації (припустимо)
        if (confirmCode === 'expected_code') { // Це умовний приклад
            dispatch({ type: 'LOGIN', payload: { token: 'some_new_token' } });
            navigate('/balance');
        }
    };

    return (
        <div className="default-container">
            <button className="nav_back-button">Назад</button>
            <h1>Підтвердження реєстрації</h1>
            <form onSubmit={handleConfirm}>
                <div className="input_field-container">
                    <input className="input_field" name="confirm" placeholder="Код підтвердження" required />
                </div>
                <button type="submit" className="continue-button">Підтвердити</button>
            </form>
        </div>
    );
};

export default SignupConfirmPage;
```

### Файл `SigninPage.js`

```jsx
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const SigninPage = () => {
    const navigate = useNavigate();
    const { dispatch } = useContext(AuthContext);

    const handleSignin = (event) => {
        event.preventDefault();
        const { email, password } = event.target.elements;
        const userData = { email: email.value, password: password.value };

        // Перевірка даних і ввід в акаунт (припустимо)
        dispatch({ type: 'LOGIN', payload: { token: 'some_token', user: userData } });
        
        // Перевірка підтвердження
        if (!userData.confirm) {
            navigate('/signup-confirm');
        } else {
            navigate('/balance');
        }
    };

    return (
        <div className="default-container">
            <button className="nav_back-button">Назад</button>
            <h1>Вхід в акаунт</h1>
            <form onSubmit={handleSignin}>
                <div className="input_field-container">
                    <input className="input_field" name="email" placeholder="Email" required />
                    <input className="input_field" name="password" type="password" placeholder="Password" required />
                </div>
                <button type="submit" className="continue-button">Увійти</button>
            </form>
        </div>
    );
};

export default SigninPage;


### Файл `RecoveryPage.js`

```jsx
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const RecoveryPage = () => {
    const navigate = useNavigate();

    const handleRecovery = (event) => {
        event.preventDefault();
        const { email } = event.target.elements;
        
        // Відправка коду для відновлення (припустимо)
        navigate('/recovery-confirm');
    };

    return (
        <div className="default-container">
            <button className="nav_back-button">Назад</button>
            <h1>Відновлення акаунту</h1>
            <form onSubmit={handleRecovery}>
                <div className="input_field-container">
                    <input className="input_field" name="email" placeholder="Email" required />
                </div>
                <button type="submit" className="continue-button">Відправити код</button>
            </form>
        </div>
    );
};

export default RecoveryPage;
```

### Файл `RecoveryConfirmPage.js`

```jsx
import React, { useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const RecoveryConfirmPage = () => {
    const navigate = useNavigate();

    const handleRestore = (event) => {
        event.preventDefault();
        // Логіка відновлення пароля
        navigate('/balance');
    };

    return (
        <div className="default-container">
            <button className="nav_back-button">Назад</button>
            <h1>Підтвердження відновлення</h1>
            <form onSubmit={handleRestore}>
                <div className="input_field-container">
                    <input className="input_field" name="password" type="password" placeholder="Новий пароль" required />
                </div>
                <button type="submit" className="continue-button">Відновити пароль</button>
            </form>
        </div>
    );
};

export default RecoveryConfirmPage;
```

### Файл `PrivateRoute.js`

```jsx
import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const PrivateRoute = ({ children }) => {
    const { token } = useContext(AuthContext);

    // Перевірка на наявність токена в контексті
    if (!token) {
        return <Navigate to="/signin" />;
    }

    return children;
};

export default PrivateRoute;
```

### Файл `BalancePage.js`

```jsx
import React, { useContext } from 'react';
import { Link } from 'react-router-dom';
import { AuthContext } from '../AuthContext';

const BalancePage = () => {
    // Початковий баланс (припустимо)
    const initialBalance = 100;

    // Приклад взаємодії з контекстом
    const { user } = useContext(AuthContext);

    return (
        <div className="default-container">
            <Link to="/settings" className="nav_back-button">Налаштування</Link>
            <Link to="/notifications" className="nav_back-button" style={{right: '30px', left: 'auto'}}>Сповіщення</Link>
            <h1>Main wallet</h1>
            <p>Баланс: ${initialBalance}</p>
            <div className="button-container">
                <Link to="/receive" className="continue-button">Отримати</Link>
                <Link to="/send" className="register-button">Відправити</Link>
            </div>
        </div>
    );
};

export default BalancePage;
```
### Файл `NotificationsPage.js`

```jsx
import React, { useContext } from 'react';
import { AuthContext } from '../AuthContext';

const NotificationsPage = () => {
    const { user } = useContext(AuthContext);
    
    // Припустимо, що ми отримуємо нотифікації з деякого джерела
    const notifications = [
        { id: 1, text: "Вхід в акаунт з нового пристрою." },
        { id: 2, text: "Ваш пароль було успішно змінено." }
    ];

    return (
        <div className="default-container">
            <h1>Нотифікації</h1>
            <div style={{ overflowY: 'scroll', height: '70%' }}>
                {notifications.map((notification) => (
                    <div key={notification.id}>
                        <p>{notification.text}</p>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default NotificationsPage;
```

### Файл `SettingsPage.js`

```jsx
import React, { useContext } from 'react';
import { AuthContext } from '../AuthContext';

const SettingsPage = () => {
    const { dispatch } = useContext(AuthContext);

    const handleChangeEmail = (event) => {
        event.preventDefault();
        const { newEmail, password } = event.target.elements;
        // Логіка зміни email
        dispatch({ type: 'UPDATE_USER', payload: { email: newEmail.value } });
    };

    const handleChangePassword = (event) => {
        event.preventDefault();
        const { newPassword } = event.target.elements;
        // Логіка зміни пароля
        dispatch({ type: 'UPDATE_USER', payload: { password: newPassword.value } });
    };

    const handleLogout = () => {
        dispatch({ type: 'LOGOUT' });
    };

    return (
        <div className="default-container">
            <h1>Налаштування</h1>
            <form onSubmit={handleChangeEmail}>
                <div className="input_field-container">
                    <input className="input_field" name="newEmail" placeholder="Новий email" required />
                    <input className="input_field" name="password" type="password" placeholder="Поточний пароль" required />
                    <button type="submit" className="settings-button">Зберегти Email</button>
                </div>
            </form>
            <form onSubmit={handleChangePassword}>
                <div className="input_field-container">
                    <input className="input_field" name="newPassword" type="password" placeholder="Новий пароль" required />
                    <button type="submit" className="settings-button">Зберегти пароль</button>
                </div>
            </form>
            <button onClick={handleLogout} className="settings-button">Вийти</button>
        </div>
    );
};

export default SettingsPage;
```

### Файл `receivePage.js`

```jsx
import React, { useState } from 'react';

const receivePage = () => {
    const [amount, setAmount] = useState('');
    
    const handlereceive = () => {
        // Припустимо, додаємо транзакцію одержання коштів
        alert(`Funds received: $${amount}`);
    };

    return (
        <div className="default-container">
            <h1>Отримати кошти</h1>
            <div className="input_field-container">
                <input 
                    className="input_field" 
                    type="number" 
                    value={amount} 
                    onChange={(e) => setAmount(e.target.value)} 
                    placeholder="Вкажіть суму"
                    required
                />
                <button className="continue-button" onClick={handlereceive}>Одержати</button>
            </div>
        </div>
    );
};

export default receivePage;
```

### Файл `SendPage.js`

```jsx
import React, { useState } from 'react';

const SendPage = () => {
    const [email, setEmail] = useState('');
    const [amount, setAmount] = useState('');

    const handleSend = (event) => {
        event.preventDefault();
        // Припустимо, відправляємо кошти або створюємо транзакцію
        alert(`Sent $${amount} to ${email}`);
    };

    return (
        <div className="default-container">
            <h1>Відправити кошти</h1>
            <form onSubmit={handleSend}>
                <div className="input_field-container">
                    <input
                        className="input_field"
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="Email одержувача"
                        required
                    />
                    <input
                        className="input_field"
                        type="number"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        placeholder="Сума"
                        required
                    />
                </div>
                <button type="submit" className="continue-button">Відправити</button>
            </form>
        </div>
    );
};

export default SendPage;
 
 Файл TransactionPage.js
 import React, { useContext } from 'react';
import { TransactionContext } from '../TransactionContext';

const TransactionPage = () => {
    const { transactions } = useContext(TransactionContext);

    return (
        <div className="default-container">
            <h1>Транзакції</h1>
            <div className="transaction-list">
                {transactions.map((transaction, index) => (
                    <div key={index} className="transaction-item">
                        <p>Тип: {transaction.type}</p>
                        <p>Сума: ${transaction.amount}</p>
                        <p>На email: {transaction.email}</p>
                        <p>Дата: {transaction.date}</p>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default TransactionPage;
