Date 31.05.2024
  Дія 1. Внесені зміни у наступні файли у зв'язку з пошуком вирішення проблеми постійного збереження користувачів на прикладі збереження нотифікацій:
1. Оновлення AuthContext.js для забезпечення постійного керування станом.
2. Реєстрація користувача в SignupPage.js.
3. Переконайтеся, що транзакції постійно зберігаються в BalancePage.js.
  Після зміни BalancePage.js зникли нотифікації виходу з акаунту. Вже з'явилося зберігання акаунтів, але дозволяє зберігання з однаковим логіном під різним id та з'являються дублікати користувачів з тим самим логіном на сторінці UsersPage. При тому при оновленні сторінки зникає акаунт при вході на вторінці SigninPage.
4. Забезпечте реєстрацію та постійні події NotificationsPage.js.
5. Забезпечте належну обробку підтвердження реєстрації в SignupConfirmPage.js.
Пошук вирішення проблеми зникання користувача після оновлення сторінки BalancePage

  Дія 2. З'явились такі проблеми:
1. Зникли записи логування виходу з акаунту на сторінці NotificationsPage.
2. Зникання користувача при спробі входу на сторінці SigninPage після оновлення сторінки BalancePage і виходу з акаунту.
3. Вже з'явилося зберігання акаунтів, але дозволяє зберігання з однаковим логіном під різним id та з'являються дублікати користувачів з тим самим логіном на сторінці UsersPage.

  Вирішення:
1. Змініть обробку LOGOUT події у AuthContext.js для збереження події виходу в локальному сховищі - у запропонованому коді змін не виявлено.

2. Перевіримо, що користувач збережений у локальному сховищі та коректно завантажується. Додамо логування при збереженні і завантаженні стану.
Рішення:
Переконайтеся, що localStorage збережено та завантажено правильно у AuthContext.js - у запропонованому коді змін не виявлено.

3. Дублікати користувачів з однаковим логіном на сторінці UsersPage
Перевіримо під час реєстрації, чи існує користувач з тими самими даними. Додамо перевірку у вихідні дані під час реєстрації.
Рішення:
Покращимо функцію registerUser у AuthActions.js - запропонований код Date 31.05.2024 version-2 не працює, не після створення користувача немає переходу на сторінку підтвердження.

//===Date 03.06.2024===//

Warning: Encountered two children with the same key, `o3q58i1l2di`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
Попередження, яке ви бачите, вказує на те, що в списку користувачів є дублікати ключів, що може спричинити проблеми з відтворенням. Кожен елемент у списку повинен мати унікальний ключ, щоб підтримувати належну ідентифікацію в оновленнях у React.

Ось як ви можете налагодити та вирішити цю проблему:

Покрокове рішення:
Забезпечте унікальні ідентифікатори користувачів :

Переконайтеся, що кожна дія реєстрації користувача створює унікальний ідентифікатор користувача.
Перевірити рендеринг списку користувачів :

Перевірте код, у якому ви відтворюєте список користувачів, і переконайтеся, що кожен елемент користувача має унікальний ключ.
Правильно обробляти стан і оновлення :

Переконайтеся, що дані користувача є послідовними та відсутні випадкові дублікати, особливо під час оновлення стану.
Основні міркування:
Унікальний ключ для кожного користувача :

Ключі React : React використовує ключі, щоб визначити, які елементи змінено, додано чи видалено. Це гарантує належне обслуговування кожного екземпляра компонента.
Послідовний і дійсний стан :

Унікальні ідентифікатори користувачів : переконайтеся, що idдля кожного користувача унікальний і що ваша логіка введення ключів у відтворенні списку правильна.
Перевірте логіку реєстрації : переконайтеся, що логіка реєстрації користувача запобігає повторенню.
Обробка помилок і журнал налагодження :

Додайте відповідні журнали консолі або обробку помилок під час додавання користувача, щоб виявити та виправити будь-які аномалії.
UUID для генерації ключів :

Легко генеруйте унікальні ключі за допомогою бібліотек, uuidщоб гарантувати їх унікальність у програмі.
Забезпечивши унікальні ідентифікатори для кожного користувача та належним чином керуючи оновленнями стану та рендерингом списків, ви зможете вирішити попередження та запобігти дублюванню ключових проблем у компонентах React.

//===Date 05.06.24===//


На сторінках SendPage та ReceivePage створити можливість вказати email реального користувача, котрий потім буде відображатися у транзакції та нотифікації. Зробити постійне збереження транзакцій і прив'язати як до відправника так і до отримувача коштів.
На цих же сторінках створюємо систему грошових переказів:
Western Union;
MoneyGram;
RIA;
IntelExpress;
MEEST;
Welsend, які потрібно буде вибрати зі списку типу radio.

Проблема:
При натисканні на посилання транзакції на сторінці BalancePage сторінка TransactionPage показує повідомлення: "Transaction not found", але в посилання є id транакції. Знайти причину та рішення.

Завдання:
На сторінках SendPage та ReceivePage вже створена можливість вказати email реального користувача, котрий потім буде відображатися у транзакції та нотифікації, але немає перевірки на наявність його у базі даних. 
1.Зробити постійне збереження транзакцій і прив'язати як до відправника так і до отримувача коштів.
2.Систему грошових переказів відобразити у вертикальному списку.
3.Додати поле вводу для email користувача від якого треба отримати грошовий переказ. Отримати переказ можна буде при умові, якщо вказаний користувач відправив конкретно вказану суму і збігається вид грошового переказу.
4.Потрібно, щоб вже змінений баланс користувача зберігався разом зі транзакціями між сесіями.

РІШЕННЯ:
Проблема, яку потрібно вирішити: під час натискання посилання транзакції на сторінці BalancePage на сторінці TransactionPage відображається повідомлення «Транзакцію не знайдено», навіть якщо ідентифікатор транзакції вказано в URL-адресі. Дослідіть причину та рішення.
завдання:
Забезпечте постійне зберігання транзакцій і прив’яжіть їх до відправника та одержувача.
Відобразити систему грошових переказів у вертикальному списку.
Додайте поле введення електронної пошти, з якої користувач хоче отримувати гроші. Переказ коштів можливий лише в тому випадку, якщо вказаний користувач надіслав точну суму та характер переказу збігаються.
Переконайтеся, що змінений баланс користувача зберігається разом із транзакціями між сеансами.
Нові файли для створення або завдання для виконання:
Транзакція не знайдена - рішення:
Перевірте компонент TransactionPage: переконайтеся, що ідентифікатор транзакції правильно передається та перевіряється в компоненті TransactionPage - проблема відсутності транзакцій вирішена.

Додана перевірка існування отримувача та відправника коштів. Але зберігання транзакцій поки немає. Також не працює видалення користувача???

//===Date 06.06.24===//

Наступне завдання:
Створити можливість отримання переазу, якщо він був створений раніше та співпадає по email, сумі та типу платежу. Також збереження транзакцій з прив'язкою до користувача.
Створити акаунт адміна, прописати. Створити фільтр нотифікацій окремо для адміна і для юзера.

!!! Поясни як взаємодіють між собою та іншими файлами Симульована база даних користувачів "export const usersDatabase = []" у файлах AuthActions та UsersPage, та Зберігання користувачів в контексті в AuthContext "users: []"?

//===Date 08.06.24===//

Запитання:
Поясни як взаємодіють між собою та іншими файлами Симульована база даних користувачів "export const usersDatabase = []" у файлах AuthActions та UsersPage, та Зберігання користувачів в контексті в AuthContext "users: []"?

Завдання: (втілюй по можливості всі рішення відразу у першому варіанті коду)
На сторінках SendPage та ReceivePage вже створена можливість вказати email реального користувача, котрий потім буде відображатися у транзакції та нотифікації та є перевірка на наявність його у базі даних. 
1. Треба додати зробити перевірку на відповідність типу платежу, та отримувач не мав той самий email. 
2. Зробити постійне збереження транзакцій і прив'язати як до відправника так і до отримувача коштів.
3. Систему грошових переказів відобразити у вертикальному списку.
4. Передумовою отримання "переказу" повинно бути створення "відправлення", якщо вказаний користувач відправив конкретно вказану суму і збігається вид грошового переказу.
5. Потрібно, щоб вже змінений баланс користувача зберігався разом зі транзакціями між сесіями.

//===Date 10.06.24===//
Продовження роботи над питаннями попереднього дня.
Узгодити файл transactions.js, відсутнє зберігання транзакцій та балансу.
Продовження роботи над зберіганням.

Наразі створено зберігання транзакцій на сторінці BalancePage, вони вже прив'язані до конкретного користувача.


//===Date 11.06.24===//
При відправленні методом "MoneyGram" створюється у відправника дві транзакції: відправлення та отримання, але транзакція отримання повинна з'являтися тільки у отримувача. При чому спочатку у відправника знімається сума, вказана у транзакції. А отримувач отримує подвійну суму порівняно з відправленою.Коли вийти з акаунту відправника та знову в нього повернутися, то зникають ці дві транзакції та сума транзакції опиняється також подвійною.

//===Date 12.06.24===//
Модель GPT 4o не розуміє як вирішити проблему.

У всьому запропонованому тобою коді немає розв'язання заявленої проблеми: 
При відправленні методом "MoneyGram" створюється у відправника дві транзакції: відправлення та отримання, але транзакція отримання повинна з'являтися тільки в отримувача. При чому спочатку у відправника знімається сума, вказана у транзакції. А отримувач отримує подвійну суму порівняно з відправленою. Коли вийти з акаунту відправника та знову в нього повернутися, то зникають ці дві транзакції, а сума транзакції опиняється також подвійною.
Навіщо подвоювати значення суми транзакції - "amount: parseFloat(amount) * 2, // Fix incorrect amount multiplier", якщо у нас і так подвоюється, а цього бути не повинно! На мій погляд подвоєння суми відбувається через створення двох транзакцій: відправлення та отримання. Але ж транзакція віправлення повинна тільки знімати кошти у відправника, а транзакція отримання повинна тільки додавати ту саму суму отримувачу.

Після цього запиту проблема зберігання транзакцій вирішилася, але подвоєння суми залишилось.

Поки вирішувалось питання подвоєння суми, попередні питання помінялись місцями.

Додано "const saveTransactionsToLocalStorage" до AuthContext, але ніде не використано.

//===Date 13.06.24===//
Плутанина з транзакціями та збереженням та очищенням глобальної пам'яті(Знайдено: Додано в очищеня всі три види транзакцій) - розібратись з видами транзакцій. Після очищення всього видалення не працює, але після створення користувача заново та відразу видалення працює.
На цей момент створюється тільки одна вихідна транзакція, попередня скасовується у балансі. У отримувача відсутні транзакції та зміна балансу.

Завдання: 
1. Повернути транзакції до попереднього виду, бо творений фільтр повинен фільтрувати транзакції по заданим параметрам. Повертаєм case "ADD_TRANSACTION"
2. Розібратися з загрузкою та збереженням даних.

//===Date 16.06.24===//
Проблема:
При спробі відновити акаунт та змінити пароль видає помилку:
dispatch is not a function
TypeError: dispatch is not a function
    at updatePassword (http://localhost:3000/static/js/bundle.js:537:3)
    at handleRestore 
    
Помилка вказує на те, що dispatchфункція не передається або не використовується належним чином у вашому компоненті. Ось як ви можете вирішити цю проблему:

Передайте dispatchфункцію updatePasswordметоду.
Переконайтеся, dispatchщо він правильно витягується з контексту.

//===Date 17.06.24===//
Працюємо над транзакціями.
Було створено транзакції за наступними правилами:
Транзакція відправлення "Western Union" повинна створювати спочатку транзакцію відправлення та повідомлення під балансом про резервування даної суми у відправника та очікувати створення транзакції отримання на стороні отримувача, якою він завершує цю транзакцію і в цей момент отримувачу зараховується вказана сума, а у відправника знімається вказана сума та зникає повідомлення про резерв цієї суми та з'являється транзакція про отримання. 
Транзакція відправлення "MoneyGram" відразу знімає вказану суму у відправника та зараховує її отримувачу та створює транзакцію відправлення в акаунті відправника та транзакцію отримувача в акаунті отримувача.

Але потім знову почали зникати транзакції без видимої причини. Одна проблема, яка може бути з цим пов'язана це помилка видалення акаунту через сторінку видалення.

//===Date 18.06.24===//
Вирішуєм проблеми з підтвердженням, вони зависають у пам'яті, додати їх очищення до очищення транзакцій.
Вирішено: додано збереження транзакцій при виході з акаунту.

Розібратися з нотифікаціями.

//===Date 19.06.24===//
Запитання:
У файлі AuthContext у нас є дев'ять основних кейсів: LOGIN, LOGOUT, REGISTER_USER, REMOVE_USER, UPDATE_USER_EMAIL, UPDATE_USER_PASSWORD, CONFIRM_USER, ADD_TRANSACTION, CONFIRM_TRANSACTION. А в файлі AuthActions такі п'ять змінних: registerUser, confirmUser, updatePassword, deleteAccount, confirmTransaction. Чому у фалйі AuthActions не має відповідних дій до інших кейсів з AuthContext? Чи вони знаходяться в інших файлах?

Пояснення відмінностей:

Файл AuthContext.jsмістить, reducer який обробляє різні action типи, що представляють переходи станів у вашій програмі. Мета цього reducer полягає в тому, щоб вказати, як app state змінюється у відповідь на actions та є частиною useReducer налаштування гака.

Ці випадки являють собою конкретні переходи станів (тобто, LOGIN, LOGOUT тощо), і кожен випадок описує, як стан має бути змінено, коли виконується певна дія.

Обов'язки AuthActions.js:

З іншого боку, AuthActions.js визначає функції, які генерують і відправляють ці дії. Ці функції зазвичай виконують логічні операції, а потім використовують dispatch функцію для запуску оновлень стану, визначених у AuthContext.js.

Чому деякі дії відсутні в AuthActions:

Не кожен тип дії повинен мати відповідну функцію в AuthActions.js. Деякі дії є простими і не вимагають додаткової логіки перед їх відправленням.

Наприклад:

LOGIN і LOGOUT дії можуть надсилатися безпосередньо з компонентів, де ці дії запускаються (наприклад, після подання форми).
Функції REGISTER_USER, REMOVE_USER або UPDATE_USER інкапсулюють більше логіки (наприклад, генерування ідентифікаторів, підготовка корисних даних) і, отже, мають відповідні функції в AuthActions.js.
Місце проведення інших дій:

Інші дії, такі як LOGIN, LOGOUT, UPDATE_USER_EMAIL тощо, можуть надсилатися безпосередньо з якогось компонента чи інших частин вашої програми, а не через службові функції у AuthActions.js.

Додавання відсутніх дій:

За потреби ви можете додати відповідні творці дій для решти типів дій AuthActions.js задля узгодженості та збереження всієї пов’язаної з діями логіки в одному місці.

Приклад доповнення:

Наприклад, якщо ви хочете додати LOGIN творців LOGOUT дій у AuthActions.js, ви можете зробити це наступним чином:

javascript

// AuthActions.js

export const loginUser = (token, user, dispatch) => {
  dispatch({
    type: "LOGIN",
    payload: {
      token,
      user,
    },
  });
  console.log(`User ${user.email} logged in successfully.`);
};

export const logoutUser = (dispatch) => {
  dispatch({
    type: "LOGOUT",
  });
  console.log("User logged out successfully.");
};
Інтеграція в компоненти:

Потім ви будете використовувати ці функції у відповідних компонентах:

javascript

// In some component
import { loginUser, logoutUser } from "./AuthActions"; // Adjust the path accordingly

const handleLogin = () => {
  // Perform login logic
  loginUser(token, user, dispatch);
};

const handleLogout = () => {
  // Perform logout logic
  logoutUser(dispatch);
};
Це налаштування гарантує, що вся ваша логіка зміни стану централізована в AuthActions.js, полегшуючи керування та підтримку.

//===Date 20.06.24===//
Вирішити проблему зі звичним видаленням акаунту. Вирішено

//===Date 21.06.24===//
Вирішити питання фільтрування нотифікацій по поточному користувачу. 
Закінчити оформлення всього.
Вносимо зміни у AuthContext, NotificationsPage, SettingsPage
Завдання:
1.Помилки про введення невірних даних у будь-які поля вводу вивести в самому полі вводу.
2.Після вдалої зміни імейлу або паролю запропонувати користувачу у вигляді алерту застосувати зміни шляхом повторного входу в акаунт з новими даними з кнопками вийти та залишитись
3.Щоб повідомлення помилки з'явилось у полі вводу треба видалити введені дані з поля
4.Треба додати перевірку на наявність у імейлі знаку @ при реєстрації та заборонити зміну логіну, якщо введений поточний імейл при зміні імейлу або введений імейл вже зареєстрований.
виконано

//===Date 22.06.24===//
Закінчуємо функціонал для зручності, додаємо сторінку аварійного скидання всіх даних.

//===Date 24.06.24===//
Завершуємо поля вводу, вирішуємо проблему двох червоних полів при помильці у SettingsPage.
Наразі червоним підсвічується два поля в одному блоці form, якщо в одному полі помилка. Треба щоб червоним підсвічувалось те поле та текст в ньому, де сталася помилка.
Відповідь.
Щоб забезпечити підсвічування помилок в формах індивідуально для кожного поля та відповідного тексту, вам необхідно трохи змінити логіку стану компоненту та CSS стилі. Замість одного загального прапора для всього секції Email або Password, використовуйте окремі стани для кожного поля.
Додайте окремий стан для помилок кожного поля у вашу форму.

Проблема:
чомусь при перевірці введеноо логіна на співпадіння з поточним логіном пропускається перевірка if (user.email === newEmail.value) та видає помилку з наступної перевірки "Цей email вже зареєстрований". А коли другу перевірку видаляєш, то перша спрацьовує.
Рішення:
Проблема може виникати через те, що стан users може містити користувача з поточним email, спричиняючи хибне проходження першої перевірки, оскільки друга перевірка виявляє співпадіння. Замість простих умов if, можна спробувати покращити логіку перевірки, аби обидві умови працювали коректно. Скористайтеся логікою раннього виходу (early return), яка дозволяє негайно вийти з функції, якщо умова true. Це допомагає уникнути зайвої обробки.

Питання - завдання
Як стилізувати на прикладі цього фрагменту з файлу AuthContext дані для виведення у нотифікаціях, щоб кожен тип даних був стилізований індивідуально? Мене цікавbnm зміст <p className="notification-info">{event.info}</p>, а саме {event.info}, вкладені дані треба стилізувати окремо, як транзакції так і інші події: зліва лого події, потім два рядка: верхній заголовок, другий дрібним шрифтом  всі інші дані.

Відповідь:
NotificationsPage.js:
Імпортовані необхідні ресурси (як іконки для подій).
Додано назви класів notification-logo і notification-details для забезпечення належного стилю.
Використовується умовне відображення для вибору відповідного логотипу події на основі назви події.
style.css:
Визначені стилі для notification-item структурування вмісту у гнучкому полі для логотипу та деталей.
Стилізоване notification-logo та notification-details належне вирівнювання та відображення вмісту.
Додано спеціальні стилі для розділів назви події та інформації.

Проблема:
Додані іконки не відображаються. Може це пов'язанано зі структурою файлу AuthContext. Вирішено: назва папки

Файл TransactionList.js привести до стилів попереднього файлу, стилі вбудовані у файл винести у файл стилів. Файл стилів я надаю вже зі зміненими назвами. 

//===Date 25.06.24===//
Розв'язуємо проблему з оформленням BalancePage. Якісь перехрсні зв'язки стилей.
Щоб застосувати локальний шрифт до всього додатка ReactJS, ви можете зробити наступне:

1. Імпортуйте ваш локальний шрифт у головному файлі додатка (наприклад, `App.js`):

```javascript
import React from 'react';
import './yourfont.woff'; // Імпортуйте ваш локальний шрифт
```

2. Створіть глобальний стиль CSS для застосування шрифту до всього додатка. Ви можете зробити це в окремому файлі стилів (наприклад, `global.css`) та імпортувати його в `App.js`:

```css
/* global.css */
@font-face {
  font-family: 'YourFontName';
  src: url('./yourfont.woff') format('woff');
  font-weight: normal;
  font-style: normal;
}

body {
  font-family: 'YourFontName', sans-serif;
}
```

3. Імпортуйте файл стилів у `App.js`:

```javascript
import React from 'react';
import './yourfont.woff';
import './global.css';

function App() {
  return (
    <div>
      {/* Ваш додаток */}
    </div>
  );
}

export default App;
```

Тепер ваш локальний шрифт буде застосований до всього вмісту вашого додатка ReactJS.

Якщо ви хочете застосувати шрифт лише до певних компонентів, ви можете використовувати стилі CSS безпосередньо в цих компонентах, як ви показали в своєму попередньому прикладі:

```javascript
import React from 'react';
import './yourfont.woff';

function YourComponent() {
  return (
    <div style={{ fontFamily: 'YourFontName', fontSize: '16px' }}>
      Привіт, це приклад використання локального шрифту!
    </div>
  );
}

export default YourComponent;
```

Таким чином, ви можете гнучко застосовувати локальні шрифти як глобально, так і на рівні окремих компонентів у вашому додатку ReactJS. 

//===Date 26.06.24===//
Розібратися до кінця з шрифтами...

Як працює імпортований локальний шрифт?
У мене він має назву Jost і знаходиться у теці Jost. У цій теці знаходяться такі файли: Jost-Italic-VariableFont_wght.ttf та Jost-VariableFont_wght.ttf, також тека з файлами типу - Jost-Black.ttf, Jost-BlackItalic.ttf, Jost-Bold.ttf і так далі. Яким чином правильно імпортувати та внести у відповідні файли стилів, щоб дали можна було його застосовувати його у всьому додатку  ReactJS?
Застосували!

//===Date 27.06.24===//
Закінчити оформлення settings. Не працює авторизація для відображення users на сторінці settings.
Неправильно працює навігація "назад"

//===Date 28.06.24===//
Зупинилися на сторінці входу
Додали імпорт двох нових модулів: 
import Swal from "sweetalert2", установка - npm install sweetalert2
loader: "file-loader" конкретно для використання локальних шрифтів

//===Date 9.07.24===//
Завдання - адаптувати стилі головних контейнетів під зручний формат для мобільних пристроїв, після цього додати адаптацію для комп'ютера. 
Потім доопраювати семе вигляд додатку, як мобільного так і комп'ютерного.

Перелік контейнерів:
default-container
default-container-auth
welcome-container
balance-container